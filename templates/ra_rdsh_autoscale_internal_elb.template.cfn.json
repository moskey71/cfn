{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Conditions": {
        "UseAmiLookup": {
            "Fn::Equals": [
                {
                    "Ref": "AmiId"
                },
                ""
            ]
        },
        "UseAutoUpdateStack": {
            "Fn::Not": [
                {
                    "Fn::Equals": [
                        {
                            "Ref": "UpdateSchedule"
                        },
                        ""
                    ]
                }
            ]
        },
        "InstallCloudWatchAgent": {
            "Fn::Not": [
                {
                    "Fn::Equals": [
                        {
                            "Ref": "CloudWatchAgentUrl"
                        },
                        ""
                    ]
                }
            ]
        },
        "UseScheduledAction": {
            "Fn::And": [
                {
                    "Fn::Not": [
                        {
                            "Fn::Equals": [
                                {
                                    "Ref": "ScaleUpSchedule"
                                },
                                ""
                            ]
                        }
                    ]
                },
                {
                    "Fn::Not": [
                        {
                            "Fn::Equals": [
                                {
                                    "Ref": "ScaleDownSchedule"
                                },
                                ""
                            ]
                        }
                    ]
                }
            ]
        }
    },
    "Description": "This template deploys Remote Desktop Session Host (RDSH) instances in an autoscale group behind an ELB, and joins them to a domain.",
    "Mappings": {
        "InstanceTypeMap": {
            "Fn::Transform": {
                "Name": "AWS::Include",
                "Parameters": {
                    "Location": "s3://app-chemistry/snippets/instance_type_map.snippet.cfn.yaml"
                }
            }
        },
        "ShellCommandMap": {
            "Fn::Transform": {
                "Name": "AWS::Include",
                "Parameters": {
                    "Location": "s3://app-chemistry/snippets/shell_command_map.snippet.cfn.yaml"
                }
            }
        }
    },
    "Metadata": {
        "AWS::CloudFormation::Interface": {
            "ParameterGroups": [
                {
                    "Label": {
                        "default": "EC2 Instance Configuration"
                    },
                    "Parameters": [
                        "AmiNameSearchString",
                        "AmiId",
                        "InstanceType",
                        "KeyPairName",
                        "ExtraSecurityGroupIds"
                    ]
                },
                {
                    "Label": {
                        "default": "RDSH Application Configuration"
                    },
                    "Parameters": [
                        "DomainDirectoryId",
                        "DomainDnsName",
                        "DomainNetbiosName",
                        "DomainSvcAccount",
                        "DomainSvcPassword",
                        "DomainAccessUserGroup",
                        "LdapContainerOU",
                        "ConnectionBrokerFqdn",
                        "UserProfileDiskPath",
                        "RdpPrivateKeyS3Endpoint",
                        "RdpPrivateKeyPfx",
                        "RdpPrivateKeyPassword"
                    ]
                },
                {
                    "Label": {
                        "default": "AutoScale Configuration"
                    },
                    "Parameters": [
                        "DesiredCapacity",
                        "MinCapacity",
                        "MaxCapacity",
                        "ScaleDownDesiredCapacity",
                        "ScaleDownSchedule",
                        "ScaleUpSchedule",
                        "ForceUpdateToggle"
                    ]
                },
                {
                    "Label": {
                        "default": "Network Configuration"
                    },
                    "Parameters": [
                        "VPC",
                        "SubnetIDs"
                    ]
                },
                {
                    "Label": {
                        "default": "CloudFormation Configuration"
                   },
                   "Parameters": [
                       "CloudWatchAgentUrl"
                   ]
                }
            ],
            "ParameterLabels": {
                "AmiNameSearchString": {
                    "default": "AMI Name Search Pattern"
                },
                "ScaleDownDesiredCapacity": {
                    "default": "Scale Down Desired Capacity"
                }
            }
        },
        "Version": "0.0.9"
    },
    "Outputs": {
        "Ec2SecurityGroupId": {
            "Description": "Security Group ID for RDSH EC2 instances",
            "Value": {
                "Ref": "Ec2SecurityGroup"
            }
        },
        "ElbSecurityGroupId": {
            "Description": "Security Group ID for the RDSH Elastic Load Balancer",
            "Value": {
                "Ref": "ElbSecurityGroup"
            }
        },
        "LoadBalancerDns": {
            "Description": "DNS name for the ELB",
            "Value": {
                "Fn::GetAtt": [
                    "ELB",
                    "DNSName"
                ]
            }
        },
        "LoadBalancerName": {
            "Description": "Name of the Elastic Load Balancer",
            "Value": {
                "Ref": "ELB"
            }
        }
    },
    "Parameters": {
        "AmiId": {
            "Default": "",
            "Description": "(Optional) AMI ID -- will supersede Lambda-based AMI lookup using AmiNameSearchString",
            "Type": "String"
        },
        "AmiNameSearchString": {
            "Default": "Windows_Server-2016-English-Full-Base-*",
            "Description": "Search pattern to match against an AMI Name",
            "Type": "String"
        },
        "CloudWatchAgentUrl": {
            "AllowedPattern": "^$|^s3://.*$",
            "Default": "",
            "Description": "(Optional) S3 URL to CloudWatch Agent installer. Example: s3://amazoncloudwatch-agent/windows/amd64/latest/AmazonCloudWatchAgent.zip",
            "Type": "String"
        },
        "ConnectionBrokerFqdn": {
            "AllowedPattern": "[a-zA-Z0-9_-]+\\..+",
            "Default": "cb.example.com",
            "Description": "Fully qualified domain name (FQDN) of the primary Connection Broker, e.g. \"cb.example.com\"",
            "MinLength": "3",
            "Type": "String"
        },
        "DesiredCapacity": {
            "Default": "1",
            "Description": "The number of instances the autoscale group will spin up initially",
            "MinLength": "1",
            "Type": "String"
        },
        "DomainAccessUserGroup": {
            "Default": "Domain Users",
            "Description": "Domain group of users authorized to use the RDSH",
            "MinLength": "1",
            "Type": "String"
        },
        "DomainDirectoryId": {
            "AllowedPattern": "d-[a-zA-Z0-9]{10}",
            "Description": "ID of the AWS Directory Service domain, e.g. d-xxxxxxxxxx",
            "Type": "String"
        },
        "DomainDnsName": {
            "AllowedPattern": "[a-zA-Z0-9]+\\..+",
            "Default": "example.com",
            "Description": "Fully qualified domain name (FQDN) of the forest root domain e.g. example.com",
            "MaxLength": "25",
            "MinLength": "3",
            "Type": "String"
        },
        "DomainNetbiosName": {
            "AllowedPattern": "[a-zA-Z0-9]+",
            "Default": "EXAMPLE",
            "Description": "Netbios name of the domain (e.g. EXAMPLE)",
            "MaxLength": "15",
            "MinLength": "1",
            "Type": "String"
        },
        "DomainSvcAccount": {
            "AllowedPattern": "[a-zA-Z0-9_-]*",
            "Default": "CbSvcAccount",
            "Description": "User name for the account that will join the instance to the Connection Broker Cluster",
            "MaxLength": "25",
            "MinLength": "5",
            "Type": "String"
        },
        "DomainSvcPassword": {
            "AllowedPattern": "(?=^.{6,255}$)((?=.*\\d)(?=.*[A-Z])(?=.*[a-z])|(?=.*\\d)(?=.*[^A-Za-z0-9])(?=.*[a-z])|(?=.*[^A-Za-z0-9])(?=.*[A-Z])(?=.*[a-z])|(?=.*\\d)(?=.*[A-Z])(?=.*[^A-Za-z0-9]))^.*",
            "Default": "Password123",
            "Description": "Password for the Connection Broker service account. Must be at least 8 characters containing letters, numbers and symbols",
            "MaxLength": "32",
            "MinLength": "8",
            "NoEcho": "true",
            "Type": "String"
        },
        "ExtraSecurityGroupIds": {
            "Description": "List of extra Security Group IDs to attach to the RDSH instances -- include _at least_ the SG allowing connectivity to the Connection Broker database",
            "Type": "List<AWS::EC2::SecurityGroup::Id>"
        },
        "ForceUpdateToggle": {
            "AllowedValues": [
                "A",
                "B"
            ],
            "Default": "A",
            "Description": "A/B toggle that forces a change to a LaunchConfig property, triggering the AutoScale Update Policy",
            "Type": "String"
        },
        "InstanceType": {
            "AllowedValues": [
                "t2.micro",
                "t2.small",
                "t2.medium",
                "t2.large",
                "t2.xlarge",
                "t2.2xlarge",
                "t3.micro",
                "t3.small",
                "t3.medium",
                "t3.large",
                "t3.xlarge",
                "t3.2xlarge",
                "c5.large",
                "c5.xlarge",
                "c5.2xlarge",
                "c5.4xlarge",
                "m5.large",
                "m5.xlarge",
                "m5.2xlarge",
                "m5.4xlarge",
                "r4.large",
                "r4.xlarge"
            ],
            "Default": "t2.medium",
            "Description": "Amazon EC2 instance type for the Remote Desktop Session Instance",
            "Type": "String"
        },
        "KeyPairName": {
            "Description": "Public/private key pairs allow you to securely connect to your instance after it launches",
            "Type": "AWS::EC2::KeyPair::KeyName"
        },
        "LdapContainerOU": {
            "Default": "CN=Users,DC=example,DC=com",
            "Description": "DN of the LDAP container or OU in which the RDSH instance will be placed",
            "MinLength": "1",
            "Type": "String"
        },
        "MaxCapacity": {
            "Default": "2",
            "Description": "The maximum number of instances for the autoscale group",
            "MinLength": "1",
            "Type": "String"
        },
        "MinCapacity": {
            "Default": "0",
            "Description": "The minimum number of instances for the autoscale group",
            "MinLength": "1",
            "Type": "String"
        },
        "RdpPrivateKeyPassword": {
            "Description": "Password to the RDP certificate private key",
            "MaxLength": "1024",
            "MinLength": "1",
            "NoEcho": "true",
            "Type": "String"
        },
        "RdpPrivateKeyPfx": {
            "AllowedPattern": "^(.*)([/].*)+\\.pfx$",
            "Description": "S3 bucket and path to a private key for the RDP certificate, e.g. \"<bucket>/path/to/key.pfx\"",
            "Type": "String"
        },
        "RdpPrivateKeyS3Endpoint": {
            "AllowedPattern": "^(https://s3)(.*)$",
            "Default": "https://s3.amazonaws.com",
            "Description": "S3 endpoint URL hosting the bucket where the RDP certificate private key is stored",
            "Type": "String"
        },
        "ScaleDownDesiredCapacity": {
            "Default": "1",
            "Description": "(Optional) Desired number of instances during the Scale Down Scheduled Action; ignored if ScaleDownSchedule is unset",
            "Type": "Number"
        },
        "ScaleDownSchedule": {
            "Default": "",
            "Description": "(Optional) Scheduled Action in cron-format (UTC) to scale down the number of instances; ignored if empty or ScaleUpSchedule is unset (E.g. \"0 0 * * *\")",
            "Type": "String"
        },
        "ScaleUpSchedule": {
            "Default": "",
            "Description": "(Optional) Scheduled Action in cron-format (UTC) to scale up to the Desired Capacity; ignored if empty or ScaleDownSchedule is unset (E.g. \"0 10 * * Mon-Fri\")",
            "Type": "String"
        },
        "SubnetIDs": {
            "Description": "List of Subnet IDs where the RDSH instances and ELB we be launched",
            "Type": "List<AWS::EC2::Subnet::Id>"
        },
        "UpdateSchedule": {
            "AllowedPattern": "^$|^cron\\(.*\\)$|^rate\\(.*\\)$|^$",
            "ConstraintDescription": "Must be in CloudWatch events schedule expression format (Cron or Rate).",
            "Default": "",
            "Description": "(Optional) Time interval between auto stack updates. Refer to the AWS documentation for valid input syntax: https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/ScheduledEvents.html",
            "Type": "String"
        },
        "UserProfileDiskPath": {
            "AllowedPattern": "^[\\\\\\\\]{2}[a-zA-Z0-9_\\\\-]+\\..+",
            "Default": "\\\\home.example.com\\Profiles$",
            "Description": "Path to a CIFS share where User Profile Disks are stored, e.g. \"\\\\home.example.com\\Profiles$\"",
            "MinLength": "3",
            "Type": "String"
        },
        "VPC": {
            "Description": "VPC ID",
            "Type": "AWS::EC2::VPC::Id"
        }
    },
    "Resources": {
        "AmiIdLookup": {
            "Condition": "UseAmiLookup",
            "Properties": {
                "AmiNameSearchString": {
                    "Ref": "AmiNameSearchString"
                },
                "ForceUpdateToggle": {
                    "Ref": "ForceUpdateToggle"
                },
                "Region": {
                    "Ref": "AWS::Region"
                },
                "ServiceToken": {
                    "Fn::Join": [
                        ":",
                        [
                            "arn:aws:lambda",
                            {
                                "Ref": "AWS::Region"
                            },
                            {
                                "Ref": "AWS::AccountId"
                            },
                            "function:cfn-look-up-ami-ids"
                        ]
                    ]
                }
            },
            "Type": "Custom::AmiIdLookup"
        },
        "AutoScalingGroup": {
            "CreationPolicy": {
                "ResourceSignal": {
                    "Count": {
                        "Ref": "DesiredCapacity"
                    },
                    "Timeout": "PT75M"
                }
            },
            "Properties": {
                "DesiredCapacity": {
                    "Ref": "DesiredCapacity"
                },
                "HealthCheckGracePeriod": "8100",
                "HealthCheckType": "ELB",
                "LaunchConfigurationName": {
                    "Ref": "LaunchConfig"
                },
                "LoadBalancerNames": [
                    {
                        "Ref": "ELB"
                    }
                ],
                "MaxSize": {
                    "Ref": "MaxCapacity"
                },
                "MetricsCollection": [
                    {
                        "Granularity": "1Minute"
                    }
                ],
                "MinSize": {
                    "Ref": "MinCapacity"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "PropagateAtLaunch": "true",
                        "Value": {
                            "Ref": "AWS::StackName"
                        }
                    }
                ],
                "TerminationPolicies": [
                    "OldestInstance",
                    "Default"
                ],
                "VPCZoneIdentifier": {
                    "Ref": "SubnetIDs"
                }
            },
            "Type": "AWS::AutoScaling::AutoScalingGroup",
            "UpdatePolicy": {
                "AutoScalingReplacingUpdate": {
                    "WillReplace": "true"
                }
            }
        },
        "AutoUpdateStack": {
            "Condition": "UseAutoUpdateStack",
            "Properties": {
                "ServiceToken": {
                    "Fn::Join": [
                        ":",
                        [
                            "arn:aws:lambda",
                            {
                                "Ref": "AWS::Region"
                            },
                            {
                                "Ref": "AWS::AccountId"
                            },
                            "function:cfn-update-scheduler-dev-cfn_auto_update_broker"
                        ]
                    ]
                },
                "StackName": {
                    "Ref": "AWS::StackName"
                },
                "ToggleParameter": "ForceUpdateToggle",
                "ToggleValues": [
                    "A",
                    "B"
                ],
                "UpdateSchedule": {
                    "Ref": "UpdateSchedule"
                }
            },
            "Type": "Custom::AutoUpdateStack"
        },
        "ELB": {
            "Properties": {
                "ConnectionDrainingPolicy": {
                    "Enabled": "true",
                    "Timeout": "1800"
                },
                "ConnectionSettings": {
                    "IdleTimeout": "900"
                },
                "CrossZone": "false",
                "HealthCheck": {
                    "HealthyThreshold": "5",
                    "Interval": "60",
                    "Target": "HTTP:8091/ping.html",
                    "Timeout": "5",
                    "UnhealthyThreshold": "10"
                },
                "Listeners": [
                    {
                        "InstancePort": "3389",
                        "InstanceProtocol": "TCP",
                        "LoadBalancerPort": "3389",
                        "Protocol": "TCP"
                    },
                    {
                        "InstancePort": "8091",
                        "InstanceProtocol": "HTTP",
                        "LoadBalancerPort": "8091",
                        "Protocol": "HTTP"
                    }
                ],
                "Policies": [],
                "Scheme": "internal",
                "SecurityGroups": [
                    {
                        "Ref": "ElbSecurityGroup"
                    }
                ],
                "Subnets": {
                    "Ref": "SubnetIDs"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Ref": "AWS::StackName"
                        }
                    }
                ]
            },
            "Type": "AWS::ElasticLoadBalancing::LoadBalancer"
        },
        "Ec2IamInstanceProfile": {
            "Properties": {
                "Path": "/",
                "Roles": [
                    {
                        "Ref": "Ec2IamRole"
                    }
                ]
            },
            "Type": "AWS::IAM::InstanceProfile"
        },
        "Ec2IamRole": {
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Action": [
                                "sts:AssumeRole"
                            ],
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "ec2.amazonaws.com",
                                    "ssm.amazonaws.com"
                                ]
                            }
                        }
                    ],
                    "Version": "2012-10-17"
                },
                "Path": "/"
            },
            "Type": "AWS::IAM::Role"
        },
        "Ec2IamRolePolicy": {
            "Properties": {
                "PolicyDocument": {
                    "Statement": [
                        {
                            "Action": [
                                "ssm:DescribeAssociation",
                                "ssm:GetDeployablePatchSnapshotForInstance",
                                "ssm:GetDocument",
                                "ssm:ListAssociations",
                                "ssm:ListInstanceAssociations",
                                "ssm:PutInventory",
                                "ssm:UpdateAssociationStatus",
                                "ssm:UpdateInstanceAssociationStatus",
                                "ssm:UpdateInstanceInformation"
                            ],
                            "Effect": "Allow",
                            "Resource": "*"
                        },
                        {
                            "Action": [
                                "ec2messages:AcknowledgeMessage",
                                "ec2messages:DeleteMessage",
                                "ec2messages:FailMessage",
                                "ec2messages:GetEndpoint",
                                "ec2messages:GetMessages",
                                "ec2messages:SendReply"
                            ],
                            "Effect": "Allow",
                            "Resource": "*"
                        },
                        {
                            "Action": [
                                "cloudwatch:PutMetricData"
                            ],
                            "Effect": "Allow",
                            "Resource": "*"
                        },
                        {
                            "Action": [
                                "ec2:DescribeInstanceStatus"
                            ],
                            "Effect": "Allow",
                            "Resource": "*"
                        },
                        {
                            "Action": [
                                "ds:CreateComputer",
                                "ds:DescribeDirectories"
                            ],
                            "Effect": "Allow",
                            "Resource": "*"
                        },
                        {
                            "Action": [
                                "logs:CreateLogGroup",
                                "logs:CreateLogStream",
                                "logs:DescribeLogGroups",
                                "logs:DescribeLogStreams",
                                "logs:PutLogEvents"
                            ],
                            "Effect": "Allow",
                            "Resource": "*"
                        },
                        {
                            "Action": [
                                "s3:GetObject"
                            ],
                            "Effect": "Allow",
                            "Resource": {
                                "Fn::Join": [
                                    "",
                                    [
                                        "arn:aws:s3:::",
                                        {
                                            "Ref": "RdpPrivateKeyPfx"
                                        }
                                    ]
                                ]
                            }
                        },
                        {
                            "Action": [
                                "s3:GetObject"
                            ],
                            "Effect": "Allow",
                            "Resource": [
                                "arn:aws:s3:::amazon-ssm-*",
                                "arn:aws:s3:::amazoncloudwatch-agent/*"
                            ]
                        },
                        {
                            "Action": [
                                "s3:ListBucket"
                            ],
                            "Effect": "Allow",
                            "Resource": "arn:aws:s3:::amazon-ssm-packages-*"
                        },
                        {
                            "Action": [
                                "autoscaling:DescribeAutoScalingInstances"
                            ],
                            "Effect": "Allow",
                            "Resource": "*"
                        },
                        {
                            "Action": [
                                "autoscaling:SuspendProcesses"
                            ],
                            "Condition": {
                                "StringEquals": {
                                    "autoscaling:ResourceTag/aws:cloudformation:stack-id": {
                                        "Ref": "AWS::StackId"
                                    }
                                }
                            },
                            "Effect": "Allow",
                            "Resource": "*"
                        }
                    ],
                    "Version": "2012-10-17"
                },
                "PolicyName": {
                    "Fn::Join": [
                        "",
                        [
                            "ra-rdsh-",
                            {
                                "Ref": "AWS::StackName"
                            }
                        ]
                    ]
                },
                "Roles": [
                    {
                        "Ref": "Ec2IamRole"
                    }
                ]
            },
            "Type": "AWS::IAM::Policy"
        },
        "Ec2SecurityGroup": {
            "Properties": {
                "GroupDescription": "Allow Remote Access to the RDSH instances",
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "",
                                [
                                    "ra-rdsh-ec2-",
                                    {
                                        "Ref": "AWS::StackName"
                                    }
                                ]
                            ]
                        }
                    }
                ],
                "VpcId": {
                    "Ref": "VPC"
                }
            },
            "Type": "AWS::EC2::SecurityGroup"
        },
        "ElbSecurityGroup": {
            "Properties": {
                "GroupDescription": "Allow connectivity through the RDSH ELB to RDSH instances",
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "",
                                [
                                    "ra-rdsh-elb-",
                                    {
                                        "Ref": "AWS::StackName"
                                    }
                                ]
                            ]
                        }
                    }
                ],
                "VpcId": {
                    "Ref": "VPC"
                }
            },
            "Type": "AWS::EC2::SecurityGroup"
        },
        "ElbToRdshEgressTcp3389": {
            "Properties": {
                "DestinationSecurityGroupId": {
                    "Ref": "Ec2SecurityGroup"
                },
                "FromPort": "3389",
                "GroupId": {
                    "Ref": "ElbSecurityGroup"
                },
                "IpProtocol": "tcp",
                "ToPort": "3389"
            },
            "Type": "AWS::EC2::SecurityGroupEgress"
        },
        "ElbToRdshEgressTcp8091": {
            "Properties": {
                "DestinationSecurityGroupId": {
                    "Ref": "Ec2SecurityGroup"
                },
                "FromPort": "8091",
                "GroupId": {
                    "Ref": "ElbSecurityGroup"
                },
                "IpProtocol": "tcp",
                "ToPort": "8091"
            },
            "Type": "AWS::EC2::SecurityGroupEgress"
        },
        "ElbToRdshIngressTcp3389": {
            "Properties": {
                "FromPort": "3389",
                "GroupId": {
                    "Ref": "Ec2SecurityGroup"
                },
                "IpProtocol": "tcp",
                "SourceSecurityGroupId": {
                    "Ref": "ElbSecurityGroup"
                },
                "ToPort": "3389"
            },
            "Type": "AWS::EC2::SecurityGroupIngress"
        },
        "ElbToRdshIngressTcp8091": {
            "Properties": {
                "FromPort": "8091",
                "GroupId": {
                    "Ref": "Ec2SecurityGroup"
                },
                "IpProtocol": "tcp",
                "SourceSecurityGroupId": {
                    "Ref": "ElbSecurityGroup"
                },
                "ToPort": "8091"
            },
            "Type": "AWS::EC2::SecurityGroupIngress"
        },
        "LaunchConfig": {
            "Metadata": {
                "AWS::CloudFormation::Authentication": {
                    "Ec2IamRole": {
                        "roleName": {
                            "Ref": "Ec2IamRole"
                        },
                        "type": "S3"
                    }
                },
                "AWS::CloudFormation::Init": {
                    "configSets": {
                        "config": [
                            "install-cloudwatch-agent",
                            "join-domain",
                            "setup",
                            "suspend-azrebalance",
                            "installRDS",
                            "finalize"
                        ],
                        "update": [
                            "suspend-azrebalance",
                            "setup",
                            "finalize"
                        ]
                    },
                    "finalize": {
                        "commands": {
                            "10-signal-success": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "cfn-signal.exe -e 0",
                                            " --stack ",
                                            {
                                                "Ref": "AWS::StackName"
                                            },
                                            " --resource AutoScalingGroup ",
                                            " --region ",
                                            {
                                                "Ref": "AWS::Region"
                                            }
                                        ]
                                    ]
                                },
                                "ignoreErrors": "true",
                                "waitAfterCompletion": "0"
                            }
                        }
                    },
                    "install-cloudwatch-agent": {
                        "commands": {
                            "10-install-cloudwatch-agent": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            {
                                                "Fn::FindInMap": [
                                                    "ShellCommandMap",
                                                    "powershell",
                                                    "command"
                                                ]
                                            },
                                            " \"& { ",
                                            "$CloudWatchAgentUri = [System.Uri]'",
                                            {
                                                "Ref": "CloudWatchAgentUrl"
                                            },
                                            "'; ",
                                            "Write-Host '$CloudWatchAgentUri is' $CloudWatchAgentUri ; ",
                                            "Write-Host '$CloudWatchAgentUri.host is' $CloudWatchAgentUri.host ; ",
                                            "$CloudWatchAgentScriptDir = 'c:\\cfn\\scripts\\AmazonCloudWatchAgent'; ",
                                            "$CloudWatchAgentZipFile = Join-Path $CloudWatchAgentScriptDir $CloudWatchAgentUri.Segments[($CloudWatchAgentUri.Segments.Length-1)]; ",
                                            "$Null = New-Item $CloudWatchAgentScriptDir -Type Directory -Force; ",
                                            "Read-S3Object",
                                            " -BucketName $CloudWatchAgentUri.Host",
                                            " -Key ($CloudWatchAgentUri.Segments[1..($CloudWatchAgentUri.Segments.Length-1)] -Join '')",
                                            " -File $CloudWatchAgentZipFile",
                                            " -Region ",
                                            {
                                                "Ref": "AWS::Region"
                                            },
                                            "; ",
                                            "$CloudWatchAgentInstallScript =  \"$CloudWatchAgentScriptDir\"+'\\install.ps1';",
                                            "$CloudWatchAgentConfig =  \"$CloudWatchAgentScriptDir\"+'\\aws-cloudwatch-agent-config.json';",
                                            " Expand-Archive -Path $CloudWatchAgentZipFile -DestinationPath $CloudWatchAgentScriptDir;",
                                            "Push-Location -Path $CloudWatchAgentScriptDir;",
                                            "iex $CloudWatchAgentInstallScript;",
                                            ".\\amazon-cloudwatch-agent-ctl.ps1 -a fetch-config -m ec2 -c file:$CloudWatchAgentConfig -s;",
                                            "Pop-Location",
                                            "}\""
                                        ]
                                    ]
                                },
                                "waitAfterCompletion": "0"
                            }
                        },
                        "files": {
                            "c:\\cfn\\scripts\\AmazonCloudWatchAgent\\aws-cloudwatch-agent-config.json": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "{",
                                            "    \"logs\": {\n",
                                            "        \"logs_collected\": {\n",
                                            "            \"files\": {\n",
                                            "                \"collect_list\": [\n",
                                            "                    {\n",
                                            "                        \"file_path\": \"c:\\\\ProgramData\\\\Amazon\\\\AmazonCloudWatchAgent\\\\Logs\\\\amazon-cloudwatch-agent.log\",\n",
                                            "                        \"log_group_name\": \"",
                                            {
                                                "Fn::If": [
                                                    "InstallCloudWatchAgent",
                                                    {
                                                        "Ref": "LaunchConfigLogGroup"
                                                    },
                                                    {
                                                        "Ref": "AWS::NoValue"
                                                    }
                                                ]
                                            },
                                            "\",\n",
                                            "                        \"log_stream_name\": \"cloudwatch_agent_logs_{instance_id}\",\n",
                                            "                        \"timestamp_format\": \"%H:%M:%S %y %b %-d\"\n",
                                            "                    },\n",
                                            "                    {\n",
                                            "                        \"file_path\": \"c:\\\\cfn\\\\log\\\\cfn-init.log\",\n",
                                            "                        \"log_group_name\": \"",
                                            {
                                                "Fn::If": [
                                                    "InstallCloudWatchAgent",
                                                    {
                                                        "Ref": "LaunchConfigLogGroup"
                                                    },
                                                    {
                                                        "Ref": "AWS::NoValue"
                                                    }
                                                ]
                                            },
                                            "\",\n",
                                            "                        \"log_stream_name\": \"cloudformation_init_logs_{instance_id}\",\n",
                                            "                        \"timestamp_format\": \"%H:%M:%S %y %b %-d\"\n",
                                            "                    },\n",
                                            "                    {\n",
                                            "                        \"file_path\": \"c:\\\\Watchmaker\\\\Logs\\\\salt_call.debug.log\",\n",
                                            "                        \"log_group_name\": \"",
                                            {
                                                "Fn::If": [
                                                    "InstallCloudWatchAgent",
                                                    {
                                                        "Ref": "LaunchConfigLogGroup"
                                                    },
                                                    {
                                                        "Ref": "AWS::NoValue"
                                                    }
                                                ]
                                            },
                                            "\",\n",
                                            "                        \"log_stream_name\": \"salt_call_debug_logs_{instance_id}\",\n",
                                            "                        \"timestamp_format\": \"%H:%M:%S %y %b %-d\"\n",
                                            "                    },\n",
                                            "                    {\n",
                                            "                        \"file_path\": \"c:\\\\Watchmaker\\\\Logs\\\\watchmaker.log\",\n",
                                            "                        \"log_group_name\": \"",
                                            {
                                                "Fn::If": [
                                                    "InstallCloudWatchAgent",
                                                    {
                                                        "Ref": "LaunchConfigLogGroup"
                                                    },
                                                    {
                                                        "Ref": "AWS::NoValue"
                                                    }
                                                ]
                                            },
                                            "\",\n",
                                            "                        \"log_stream_name\": \"watchmaker_logs_{instance_id}\",\n",
                                            "                        \"timestamp_format\": \"%H:%M:%S %y %b %-d\"\n",
                                            "                    }\n",
                                            "                ]\n",
                                            "            }\n",
                                            "        },\n",
                                            "        \"log_stream_name\": \"default_logs_{instance_id}\"\n",
                                            "    }\n",
                                            "}\n"
                                        ]
                                    ]
                                }
                            }
                        }
                    },
                    "installRDS": {
                        "commands": {
                            "10-install-rds": {
                                "command": "powershell.exe \"Install-WindowsFeature RDS-RD-Server,RDS-Licensing,Search-Service,RSAT-ADDS-Tools,RSAT-DNS-Server,GPMC -Verbose\"",
                                "waitAfterCompletion": "0"
                            },
                            "15-reboot-rds": {
                                "command": "powershell.exe \"Restart-Computer -Force -Verbose\"",
                                "waitAfterCompletion": "forever"
                            },
                            "20-configure-admins": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            {
                                                "Fn::FindInMap": [
                                                    "ShellCommandMap",
                                                    "powershell",
                                                    "command"
                                                ]
                                            },
                                            "-Command \"",
                                            "Invoke-Command -ScriptBlock {",
                                            "$ErrorActionPreference = 'Stop'; ",
                                            "Import-Module RemoteDesktop,RemoteDesktopServices; ",
                                            "if (-not ('",
                                            {
                                                "Ref": "DomainSvcAccount"
                                            },
                                            "' -in [Microsoft.TerminalServices.PSEngine.UserGroupHelper]::ListMembers('Administrators'))) { ",
                                            "[Microsoft.TerminalServices.PSEngine.UserGroupHelper]::AddMember('Administrators', '",
                                            {
                                                "Ref": "DomainSvcAccount"
                                            },
                                            "'); ",
                                            "} } -Verbose -ErrorAction Stop",
                                            "\""
                                        ]
                                    ]
                                },
                                "waitAfterCompletion": "0"
                            },
                            "30-configure-rdsh": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            {
                                                "Fn::FindInMap": [
                                                    "ShellCommandMap",
                                                    "psexec",
                                                    "command"
                                                ]
                                            },
                                            "-u \"",
                                            {
                                                "Ref": "DomainNetbiosName"
                                            },
                                            "\\",
                                            {
                                                "Ref": "DomainSvcAccount"
                                            },
                                            "\" -p \"",
                                            {
                                                "Ref": "DomainSvcPassword"
                                            },
                                            "\" ",
                                            {
                                                "Fn::FindInMap": [
                                                    "ShellCommandMap",
                                                    "powershell",
                                                    "command"
                                                ]
                                            },
                                            " c:\\cfn\\scripts\\configure-rdsh.ps1 ",
                                            "-DomainNetBiosName '",
                                            {
                                                "Ref": "DomainNetbiosName"
                                            },
                                            "' -GroupName '",
                                            {
                                                "Ref": "DomainAccessUserGroup"
                                            },
                                            "' -ConnectionBroker '",
                                            {
                                                "Ref": "ConnectionBrokerFqdn"
                                            },
                                            "' -UpdPath '",
                                            {
                                                "Ref": "UserProfileDiskPath"
                                            },
                                            "' -PrivateKeyPfx '",
                                            "c:\\cfn\\files\\rdp.pfx",
                                            "' -PrivateKeyPassword '\"",
                                            {
                                                "Ref": "RdpPrivateKeyPassword"
                                            },
                                            "\"'",
                                            " -HealthCheckEndPoint",
                                            " -Verbose -ErrorAction Stop"
                                        ]
                                    ]
                                },
                                "waitAfterCompletion": "0"
                            },
                            "40-reboot-rds": {
                                "command": "powershell.exe \"Restart-Computer -Force -Verbose\"",
                                "waitAfterCompletion": "forever"
                            }
                        }
                    },
                    "join-domain": {
                        "commands": {
                            "10-join-domain": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            {
                                                "Fn::FindInMap": [
                                                    "ShellCommandMap",
                                                    "powershell",
                                                    "command"
                                                ]
                                            },
                                            "-Command ",
                                            "Write-Verbose 'Waiting for SSM to complete domain join, which reboots the instance automatically' -Verbose"
                                        ]
                                    ]
                                },
                                "waitAfterCompletion": "forever"
                            }
                        }
                    },
                    "setup": {
                        "commands": {
                            "a-unzip-pstools": {
                                "command": "powershell.exe c:\\cfn\\scripts\\unzip-archive.ps1 c:\\cfn\\files\\pstools.zip c:\\cfn\\files\\pstools",
                                "waitAfterCompletion": "0"
                            },
                            "b-restrict-cfn-permissions": {
                                "Fn::Transform": {
                                    "Name": "AWS::Include",
                                    "Parameters": {
                                        "Location": "s3://app-chemistry/snippets/restrict_cfn_permissions.snippet.cfn.yaml"
                                    }
                                }
                            }
                        },
                        "files": {
                            "c:\\cfn\\cfn-hup.conf": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "[main]\n",
                                            "stack=",
                                            {
                                                "Ref": "AWS::StackName"
                                            },
                                            "\n",
                                            "region=",
                                            {
                                                "Ref": "AWS::Region"
                                            },
                                            "\n"
                                        ]
                                    ]
                                }
                            },
                            "c:\\cfn\\files\\pstools.zip": {
                                "source": "https://download.sysinternals.com/files/PSTools.zip"
                            },
                            "c:\\cfn\\files\\rdp.pfx": {
                                "authentication": "Ec2IamRole",
                                "source": {
                                    "Fn::Join": [
                                        "/",
                                        [
                                            {
                                                "Ref": "RdpPrivateKeyS3Endpoint"
                                            },
                                            {
                                                "Ref": "RdpPrivateKeyPfx"
                                            }
                                        ]
                                    ]
                                }
                            },
                            "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "[cfn-auto-reloader-hook]\n",
                                            "triggers=post.update\n",
                                            "path=Resources.LaunchConfig.Metadata.AWS::CloudFormation::Init\n",
                                            "action=cfn-init.exe -v -c update",
                                            " --stack ",
                                            {
                                                "Ref": "AWS::StackName"
                                            },
                                            " --resource LaunchConfig ",
                                            " --region ",
                                            {
                                                "Ref": "AWS::Region"
                                            },
                                            "\n"
                                        ]
                                    ]
                                }
                            },
                            "c:\\cfn\\scripts\\configure-rdsh.ps1": {
                                "source": "https://raw.githubusercontent.com/plus3it/cfn/master/scripts/configure-rdsh.ps1"
                            },
                            "c:\\cfn\\scripts\\unzip-archive.ps1": {
                                "source": "https://raw.githubusercontent.com/plus3it/cfn/master/scripts/unzip-archive.ps1"
                            }
                        },
                        "services": {
                            "windows": {
                                "cfn-hup": {
                                    "enabled": "true",
                                    "ensureRunning": "true",
                                    "files": [
                                        "c:\\cfn\\cfn-hup.conf",
                                        "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf"
                                    ]
                                }
                            }
                        }
                    },
                    "suspend-azrebalance": {
                        "Fn::Transform": {
                            "Name": "AWS::Include",
                            "Parameters": {
                                "Location": "s3://app-chemistry/snippets/autoscaling_suspend_azrebalance_win.snippet.cfn.yaml"
                            }
                        }
                    }
                }
            },
            "Properties": {
                "BlockDeviceMappings": [
                    {
                        "DeviceName": "/dev/sda1",
                        "Ebs": {
                            "DeleteOnTermination": "true",
                            "VolumeSize": "50",
                            "VolumeType": "gp2"
                        }
                    }
                ],
                "EbsOptimized": {
                    "Fn::FindInMap": [
                        "InstanceTypeMap",
                        {
                            "Ref": "InstanceType"
                        },
                        "SupportsEbsOptimized"
                    ]
                },
                "IamInstanceProfile": {
                    "Ref": "Ec2IamInstanceProfile"
                },
                "ImageId": {
                    "Fn::If": [
                        "UseAmiLookup",
                        {
                            "Fn::GetAtt": [
                                "AmiIdLookup",
                                "Id"
                            ]
                        },
                        {
                            "Ref": "AmiId"
                        }
                    ]
                },
                "InstanceType": {
                    "Ref": "InstanceType"
                },
                "KeyName": {
                    "Ref": "KeyPairName"
                },
                "SecurityGroups": {
                    "Fn::Split": [
                        ",",
                        {
                            "Fn::Join": [
                                ",",
                                [
                                    {
                                        "Ref": "Ec2SecurityGroup"
                                    },
                                    {
                                        "Fn::Join": [
                                            ",",
                                            {
                                                "Ref": "ExtraSecurityGroupIds"
                                            }
                                        ]
                                    }
                                ]
                            ]
                        }
                    ]
                },
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "<script>\n",
                                "REM CFN LaunchConfig Update Toggle: ",
                                {
                                    "Ref": "ForceUpdateToggle"
                                },
                                "\n",
                                "cfn-init.exe -v -c config",
                                " --stack ",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                " --resource LaunchConfig ",
                                " --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\n",
                                "</script>\n"
                            ]
                        ]
                    }
                }
            },
            "Type": "AWS::AutoScaling::LaunchConfiguration"
        },
        "LaunchConfigLogGroup": {
            "Condition": "InstallCloudWatchAgent",
            "Properties": {
                "LogGroupName": {
                    "Fn::Join": [
                        "",
                        [
                            "/aws/ec2/win/",
                            {
                                "Ref": "AWS::StackName"
                            }
                        ]
                    ]
                }
            },
            "Type": "AWS::Logs::LogGroup"
        },
        "PublicToElbIngressTcp3389": {
            "Properties": {
                "CidrIp": "0.0.0.0/0",
                "FromPort": "3389",
                "GroupId": {
                    "Ref": "ElbSecurityGroup"
                },
                "IpProtocol": "tcp",
                "ToPort": "3389"
            },
            "Type": "AWS::EC2::SecurityGroupIngress"
        },
        "RdshToElbIngressTcp8091": {
            "Properties": {
                "FromPort": "8091",
                "GroupId": {
                    "Ref": "ElbSecurityGroup"
                },
                "IpProtocol": "tcp",
                "SourceSecurityGroupId": {
                    "Ref": "Ec2SecurityGroup"
                },
                "ToPort": "8091"
            },
            "Type": "AWS::EC2::SecurityGroupIngress"
        },
        "ScaleDownScheduledAction": {
            "Condition": "UseScheduledAction",
            "Properties": {
                "AutoScalingGroupName": {
                    "Ref": "AutoScalingGroup"
                },
                "DesiredCapacity": {
                    "Ref": "ScaleDownDesiredCapacity"
                },
                "Recurrence": {
                    "Ref": "ScaleDownSchedule"
                }
            },
            "Type": "AWS::AutoScaling::ScheduledAction"
        },
        "ScaleUpScheduledAction": {
            "Condition": "UseScheduledAction",
            "Properties": {
                "AutoScalingGroupName": {
                    "Ref": "AutoScalingGroup"
                },
                "DesiredCapacity": {
                    "Ref": "MaxCapacity"
                },
                "Recurrence": {
                    "Ref": "ScaleUpSchedule"
                }
            },
            "Type": "AWS::AutoScaling::ScheduledAction"
        },
        "SsmAssociationCloudWatchMetrics": {
            "Fn::Transform": {
                "Name": "AWS::Include",
                "Parameters": {
                    "Location": "s3://app-chemistry/snippets/ssm_cloudwatch_asg_memory_disk_c.snippet.cfn.yaml"
                }
            }
        },
        "SsmAssociationJoinDomain": {
            "Fn::Transform": {
                "Name": "AWS::Include",
                "Parameters": {
                    "Location": "s3://app-chemistry/snippets/ssm_join_domain_ou.snippet.cfn.yaml"
                }
            }
        }
    }
}