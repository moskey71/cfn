{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Conditions": {
        "AssignPublicIp": {
            "Fn::Not": [
                {
                    "Fn::Equals": [
                        {
                            "Ref": "NoPublicIp"
                        },
                        "true"
                    ]
                }
            ]
        },
        "CreateSnsSubscription": {
            "Fn::Not": [
                {
                    "Fn::Equals": [
                        {
                            "Ref": "NotificationEmail"
                        },
                        ""
                    ]
                }
            ]
        },
        "UseAmiLookup": {
            "Fn::Equals": [
                {
                    "Ref": "AmiId"
                },
                ""
            ]
        },
        "InstallCloudWatchAgent": {
            "Fn::Not": [
                {
                    "Fn::Equals": [
                        {
                            "Ref": "CloudWatchAgentUrl"
                        },
                        ""
                    ]
                }
            ]
        },
        "UseVolumeSnapshot": {
            "Fn::Not": [
                {
                    "Fn::Equals": [
                        {
                            "Ref": "DataVolumeSnapshotId"
                        },
                        ""
                    ]
                }
            ]
        }
    },
    "Description": "This template deploys a Connection Broker (master) and a file server for home directories and profiles.",
    "Mappings": {
        "InstanceTypeMap": {
            "Fn::Transform": {
                "Name": "AWS::Include",
                "Parameters": {
                    "Location": "s3://app-chemistry/snippets/instance_type_map.snippet.cfn.yaml"
                }
            }
        },
        "ShellCommandMap": {
            "Fn::Transform": {
                "Name": "AWS::Include",
                "Parameters": {
                    "Location": "s3://app-chemistry/snippets/shell_command_map.snippet.cfn.yaml"
                }
            }
        }
    },
    "Metadata": {
        "AWS::CloudFormation::Interface": {
            "ParameterGroups": [
                {
                    "Label": {
                        "default": "EC2 Instance Configuration"
                    },
                    "Parameters": [
                        "AmiNameSearchString",
                        "AmiId",
                        "InstanceType",
                        "KeyPairName",
                        "DataVolumeSnapshotId",
                        "DataVolumeSize",
                        "ExtraSecurityGroupIds"
                    ]
                },
                {
                    "Label": {
                        "default": "RDCB Application Configuration"
                    },
                    "Parameters": [
                        "DomainDirectoryId",
                        "DomainDnsName",
                        "DomainNetbiosName",
                        "DomainAccessUserGroup",
                        "RdClientAccessName",
                        "SsmKeyId",
                        "SsmRdcbCredential"
                    ]
                },
                {
                    "Label": {
                        "default": "Network Configuration"
                    },
                    "Parameters": [
                        "VpcId",
                        "Ec2SubnetAz",
                        "Ec2SubnetId",
                        "NoPublicIp"
                    ]
                },
                {
                    "Label": {
                        "default": "CloudFormation Configuration"
                   },
                   "Parameters": [
                       "CloudWatchAgentUrl"
                   ]
                },
                {
                    "Label": {
                        "default": "Management Configuration"
                    },
                    "Parameters": [
                        "NotificationEmail"
                    ]
                }
            ],
            "ParameterLabels": {
                "AmiNameSearchString": {
                    "default": "AMI Name Search Pattern"
                }
            }
        },
        "Version": "0.0.9"
    },
    "Outputs": {
        "RdcbEc2InstanceId": {
            "Description": "Instance ID of the RDCB File Server",
            "Value": {
                "Ref": "RdCbFileServerInstance"
            }
        },
        "RdcbEc2InstanceIp": {
            "Description": "IP address of the RDCB File Server",
            "Value": {
                "Fn::GetAtt": [
                    "RdCbFileServerInstance",
                    "PrivateIp"
                ]
            }
        },
        "SnsArn": {
            "Description": "ARN for SNS topic",
            "Value": {
                "Ref": "SnsTopic"
            }
        }
    },
    "Parameters": {
        "AmiId": {
            "Default": "",
            "Description": "(Optional) AMI ID -- will supersede Lambda-based AMI lookup using AmiNameSearchString",
            "Type": "String"
        },
        "AmiNameSearchString": {
            "Default": "Windows_Server-2016-English-Full-Base-*",
            "Description": "Search pattern to match against an AMI Name",
            "Type": "String"
        },
        "CloudWatchAgentUrl": {
            "AllowedPattern": "^$|^s3://.*$",
            "Default": "",
            "Description": "(Optional) S3 URL to CloudWatch Agent installer. Example: s3://amazoncloudwatch-agent/windows/amd64/latest/AmazonCloudWatchAgent.zip",
            "Type": "String"
        },
        "DataVolumeSize": {
            "Default": "5",
            "Description": "Size of the data volume to attach to the instance",
            "MaxValue": "16384",
            "MinValue": "1",
            "Type": "Number"
        },
        "DataVolumeSnapshotId": {
            "AllowedPattern": "^$|snap-[a-zA-Z0-9]{8}|snap-[a-zA-Z0-9]{17}",
            "Default": "",
            "Description": "(Optional) Snapshot ID of an existing EBS volume. Leave blank to instantiate an empty volume",
            "Type": "String"
        },
        "DomainAccessUserGroup": {
            "Default": "Domain Users",
            "Description": "Domain group of users authorized to use the remote access solution",
            "MinLength": "1",
            "Type": "String"
        },
        "DomainDirectoryId": {
            "AllowedPattern": "d-[a-zA-Z0-9]{10}",
            "Description": "ID of the AWS Directory Service domain, e.g. d-xxxxxxxxxx",
            "Type": "String"
        },
        "DomainDnsName": {
            "AllowedPattern": "[a-zA-Z0-9-]+\\..+",
            "Default": "example.com",
            "Description": "Fully qualified domain name (FQDN) of the forest root domain, e.g. example.com",
            "MaxLength": "25",
            "MinLength": "3",
            "Type": "String"
        },
        "DomainNetbiosName": {
            "AllowedPattern": "[a-zA-Z0-9]+",
            "Default": "EXAMPLE",
            "Description": "NetBIOS name of the domain (e.g. EXAMPLE)",
            "MaxLength": "15",
            "MinLength": "1",
            "Type": "String"
        },
        "Ec2SubnetAz": {
            "Description": "Availability zone of the private subnet",
            "Type": "AWS::EC2::AvailabilityZone::Name"
        },
        "Ec2SubnetId": {
            "Description": "Private Subnet ID where the file server will run",
            "Type": "AWS::EC2::Subnet::Id"
        },
        "ExtraSecurityGroupIds": {
            "Description": "List of extra Security Group IDs to attach to the RDCB EC2 instance",
            "Type": "List<AWS::EC2::SecurityGroup::Id>"
        },
        "InstanceType": {
            "AllowedValues": [
                "t2.micro",
                "t2.small",
                "t2.medium",
                "t2.large",
                "t2.xlarge",
                "t2.2xlarge",
                "t3.micro",
                "t3.small",
                "t3.medium",
                "t3.large",
                "t3.xlarge",
                "t3.2xlarge",
                "c5.large",
                "c5.xlarge",
                "m5.large",
                "m5.xlarge",
                "r4.large",
                "r4.xlarge"
            ],
            "Default": "t2.medium",
            "Description": "Amazon EC2 instance type for the Remote Desktop Session Instance",
            "Type": "String"
        },
        "KeyPairName": {
            "Description": "Public/private key pairs allow you to securely connect to your instance after it launches",
            "Type": "AWS::EC2::KeyPair::KeyName"
        },
        "NoPublicIp": {
            "AllowedValues": [
                "false",
                "true"
            ],
            "Default": "true",
            "Description": "Controls whether to assign the instances a public IP. Recommended to leave at \"true\" _unless_ launching in a public subnet",
            "Type": "String"
        },
        "NotificationEmail": {
            "AllowedPattern": "^$|.*[@].*",
            "Description": "(Optional) Email address to subscribe to notifications and alarms",
            "Type": "String"
        },
        "SsmKeyId": {
            "AllowedPattern": "^[a-zA-Z0-9]{8}-([a-zA-Z0-9]{4}-){3}[a-zA-Z0-9]{12}$",
            "Description": "KMS Key ID used to encrypt/decrypt the SsmRdcbCredential",
            "Type": "String"
        },
        "SsmRdcbCredential": {
            "AllowedPattern": "^(?!^([aA][wW][sS]|[sS][sS][mM]))(?=^[a-zA-Z0-9_./-]*$).*$",
            "Description": "SSM Parameter Name for a SecureString containing the domain credential for the RDCB service account; SSM Parameter Value format is '@{Username = \"<user>\"; Password = \"<password>\"}'",
            "MaxLength": "1024",
            "MinLength": "1",
            "Type": "String"
        },
        "VpcId": {
            "Description": "VPC ID",
            "Type": "AWS::EC2::VPC::Id"
        }
    },
    "Resources": {
        "AmiIdLookup": {
            "Condition": "UseAmiLookup",
            "Properties": {
                "AmiNameSearchString": {
                    "Ref": "AmiNameSearchString"
                },
                "Region": {
                    "Ref": "AWS::Region"
                },
                "ServiceToken": {
                    "Fn::Join": [
                        ":",
                        [
                            "arn:aws:lambda",
                            {
                                "Ref": "AWS::Region"
                            },
                            {
                                "Ref": "AWS::AccountId"
                            },
                            "function:cfn-look-up-ami-ids"
                        ]
                    ]
                }
            },
            "Type": "Custom::AmiIdLookup"
        },
        "DataVolume": {
            "DeletionPolicy": "Snapshot",
            "Properties": {
                "AvailabilityZone": {
                    "Ref": "Ec2SubnetAz"
                },
                "Size": {
                    "Ref": "DataVolumeSize"
                },
                "SnapshotId": {
                    "Fn::If": [
                        "UseVolumeSnapshot",
                        {
                            "Ref": "DataVolumeSnapshotId"
                        },
                        {
                            "Ref": "AWS::NoValue"
                        }
                    ]
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Ref": "AWS::StackName"
                        }
                    },
                    {
                        "Key": "Consistency Group",
                        "Value": "BackupGroup01"
                    }
                ],
                "VolumeType": "gp2"
            },
            "Type": "AWS::EC2::Volume"
        },
        "Ec2IamInstanceProfile": {
            "Properties": {
                "Path": "/",
                "Roles": [
                    {
                        "Ref": "Ec2IamRole"
                    }
                ]
            },
            "Type": "AWS::IAM::InstanceProfile"
        },
        "Ec2IamRole": {
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Action": [
                                "sts:AssumeRole"
                            ],
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "ec2.amazonaws.com",
                                    "ssm.amazonaws.com"
                                ]
                            }
                        }
                    ],
                    "Version": "2012-10-17"
                },
                "ManagedPolicyArns": [
                    "arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM"
                ],
                "Path": "/"
            },
            "Type": "AWS::IAM::Role"
        },
        "Ec2IamRolePolicy": {
            "Properties": {
                "PolicyDocument": {
                    "Statement": [
                        {
                            "Action": [
                                "ec2:CreateTags"
                            ],
                            "Condition": {
                                "StringLike": {
                                    "ec2:ParentVolume": {
                                        "Fn::Join": [
                                            "",
                                            [
                                                "arn:aws:ec2:",
                                                {
                                                    "Ref": "AWS::Region"
                                                },
                                                ":*:volume/",
                                                {
                                                    "Ref": "DataVolume"
                                                }
                                            ]
                                        ]
                                    }
                                }
                            },
                            "Effect": "Allow",
                            "Resource": "*",
                            "Sid": "AllowRestrictedSnapshotActions"
                        },
                        {
                            "Action": [
                                "s3:GetObject"
                            ],
                            "Effect": "Allow",
                            "Resource": "arn:aws:s3:::amazoncloudwatch-agent/*"
                        },                        
                        {
                            "Action": [
                                "ec2:CreateSnapshot",
                                "ec2:DeleteSnapshot",
                                "ec2:DescribeSnapshots",
                                "ec2:DescribeVolumes"
                            ],
                            "Effect": "Allow",
                            "Resource": "*",
                            "Sid": "AllowSnapshotActions"
                        },
                        {
                            "Action": [
                                "ssm:GetParameters"
                            ],
                            "Effect": "Allow",
                            "Resource": [
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "arn:aws:ssm:*:*:parameter/",
                                            {
                                                "Ref": "SsmRdcbCredential"
                                            }
                                        ]
                                    ]
                                }
                            ],
                            "Sid": "AllowSsmGetParameters"
                        },
                        {
                            "Action": [
                                "kms:Decrypt"
                            ],
                            "Effect": "Allow",
                            "Resource": [
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "arn:aws:kms:*:*:key/",
                                            {
                                                "Ref": "SsmKeyId"
                                            }
                                        ]
                                    ]
                                }
                            ],
                            "Sid": "AllowKmsDecrypt"
                        }
                    ],
                    "Version": "2012-10-17"
                },
                "PolicyName": {
                    "Fn::Join": [
                        "",
                        [
                            "rdcb-ec2-",
                            {
                                "Ref": "AWS::StackName"
                            }
                        ]
                    ]
                },
                "Roles": [
                    {
                        "Ref": "Ec2IamRole"
                    }
                ]
            },
            "Type": "AWS::IAM::Policy"
        },
        "Ec2LowDiskSpaceAlarm20C": {
            "Properties": {
                "AlarmActions": [
                    {
                        "Ref": "SnsTopic"
                    }
                ],
                "AlarmDescription": "Trigger alarm when C: volume has less than 20% free disk space",
                "ComparisonOperator": "LessThanThreshold",
                "Dimensions": [
                    {
                        "Name": "InstanceId",
                        "Value": {
                            "Ref": "RdCbFileServerInstance"
                        }
                    }
                ],
                "EvaluationPeriods": "5",
                "MetricName": "LogicalDiskPercentFreeSpace_C",
                "Namespace": "AWS/EC2",
                "Period": "60",
                "Statistic": "Average",
                "Threshold": "20"
            },
            "Type": "AWS::CloudWatch::Alarm"
        },
        "Ec2LowDiskSpaceAlarm20D": {
            "Properties": {
                "AlarmActions": [
                    {
                        "Ref": "SnsTopic"
                    }
                ],
                "AlarmDescription": "Trigger alarm when D: volume has less than 20% free disk space",
                "ComparisonOperator": "LessThanThreshold",
                "Dimensions": [
                    {
                        "Name": "InstanceId",
                        "Value": {
                            "Ref": "RdCbFileServerInstance"
                        }
                    }
                ],
                "EvaluationPeriods": "5",
                "MetricName": "LogicalDiskPercentFreeSpace_D",
                "Namespace": "AWS/EC2",
                "Period": "60",
                "Statistic": "Average",
                "Threshold": "20"
            },
            "Type": "AWS::CloudWatch::Alarm"
        },
        "Ec2LowDiskSpaceAlarm40C": {
            "Properties": {
                "AlarmActions": [
                    {
                        "Ref": "SnsTopic"
                    }
                ],
                "AlarmDescription": "Trigger alarm when C: volume has less than 40% free disk space",
                "ComparisonOperator": "LessThanThreshold",
                "Dimensions": [
                    {
                        "Name": "InstanceId",
                        "Value": {
                            "Ref": "RdCbFileServerInstance"
                        }
                    }
                ],
                "EvaluationPeriods": "5",
                "MetricName": "LogicalDiskPercentFreeSpace_C",
                "Namespace": "AWS/EC2",
                "Period": "60",
                "Statistic": "Average",
                "Threshold": "40"
            },
            "Type": "AWS::CloudWatch::Alarm"
        },
        "Ec2LowDiskSpaceAlarm40D": {
            "Properties": {
                "AlarmActions": [
                    {
                        "Ref": "SnsTopic"
                    }
                ],
                "AlarmDescription": "Trigger alarm when D: volume has less than 40% free disk space",
                "ComparisonOperator": "LessThanThreshold",
                "Dimensions": [
                    {
                        "Name": "InstanceId",
                        "Value": {
                            "Ref": "RdCbFileServerInstance"
                        }
                    }
                ],
                "EvaluationPeriods": "5",
                "MetricName": "LogicalDiskPercentFreeSpace_D",
                "Namespace": "AWS/EC2",
                "Period": "60",
                "Statistic": "Average",
                "Threshold": "40"
            },
            "Type": "AWS::CloudWatch::Alarm"
        },
        "Ec2RecoveryAlarm": {
            "Properties": {
                "AlarmActions": [
                    {
                        "Fn::Join": [
                            "",
                            [
                                "arn:aws:automate:",
                                {
                                    "Ref": "AWS::Region"
                                },
                                ":ec2:recover"
                            ]
                        ]
                    }
                ],
                "AlarmDescription": "Trigger a recovery when instance status check fails for 15 consecutive minutes",
                "ComparisonOperator": "GreaterThanThreshold",
                "Dimensions": [
                    {
                        "Name": "InstanceId",
                        "Value": {
                            "Ref": "RdCbFileServerInstance"
                        }
                    }
                ],
                "EvaluationPeriods": "15",
                "MetricName": "StatusCheckFailed_System",
                "Namespace": "AWS/EC2",
                "Period": "60",
                "Statistic": "Minimum",
                "Threshold": "0"
            },
            "Type": "AWS::CloudWatch::Alarm"
        },
        "Ec2SelfIngressAll": {
            "Properties": {
                "GroupId": {
                    "Ref": "RdcbEc2SecurityGroup"
                },
                "IpProtocol": "-1",
                "SourceSecurityGroupId": {
                    "Ref": "RdcbEc2SecurityGroup"
                }
            },
            "Type": "AWS::EC2::SecurityGroupIngress"
        },
        "RdCbFileServerInstance": {
            "CreationPolicy": {
                "ResourceSignal": {
                    "Count": "1",
                    "Timeout": "PT60M"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Init": {
                    "cfnsetup": {
                        "commands": {
                            "a-set-execution-policy": {
                                "command": "powershell.exe -command Set-ExecutionPolicy RemoteSigned -Force",
                                "waitAfterCompletion": "0"
                            },
                            "b-online-disks": {
                                "command": "powershell.exe \"foreach ($disk in (Get-CimInstance -ClassName Win32_DiskDrive)) { Set-Disk -Number $disk.Index -IsOffline $false }\"",
                                "ignoreErrors": "true",
                                "waitAfterCompletion": "0"
                            },
                            "c-initialize-disks": {
                                "command": "powershell.exe C:\\ProgramData\\Amazon\\EC2-Windows\\Launch\\Scripts\\InitializeDisks.ps1",
                                "ignoreErrors": "true",
                                "waitAfterCompletion": "0"
                            },
                            "d-unzip-pstools": {
                                "command": "powershell.exe c:\\cfn\\scripts\\unzip-archive.ps1 c:\\cfn\\files\\pstools.zip c:\\cfn\\files\\pstools",
                                "ignoreErrors": "true",
                                "waitAfterCompletion": "0"
                            }
                        },
                        "files": {
                            "c:\\cfn\\cfn-hup.conf": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "[main]\n",
                                            "stack=",
                                            {
                                                "Ref": "AWS::StackId"
                                            },
                                            "\n",
                                            "region=",
                                            {
                                                "Ref": "AWS::Region"
                                            },
                                            "\n",
                                            "interval=1",
                                            "\n",
                                            "verbose=true",
                                            "\n"
                                        ]
                                    ]
                                }
                            },
                            "c:\\cfn\\files\\pstools.zip": {
                                "source": "https://download.sysinternals.com/files/PSTools.zip"
                            },
                            "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "[cfn-auto-reloader-hook]\n",
                                            "triggers=post.update\n",
                                            "path=Resources.RdCbFileServerInstance.Metadata\n",
                                            "action=cfn-init.exe -v -c update",
                                            " --stack ",
                                            {
                                                "Ref": "AWS::StackName"
                                            },
                                            " --resource RdCbFileServerInstance",
                                            " --region ",
                                            {
                                                "Ref": "AWS::Region"
                                            },
                                            "\n"
                                        ]
                                    ]
                                }
                            },
                            "c:\\cfn\\scripts\\configure-ebsbackups.ps1": {
                                "source": "https://raw.githubusercontent.com/plus3it/cfn/master/scripts/configure-ebsbackups.ps1"
                            },
                            "c:\\cfn\\scripts\\configure-fileshares.ps1": {
                                "source": "https://raw.githubusercontent.com/plus3it/cfn/master/scripts/configure-fileshares.ps1"
                            },
                            "c:\\cfn\\scripts\\configure-rdcb.ps1": {
                                "source": "https://raw.githubusercontent.com/plus3it/cfn/master/scripts/configure-rdcb.ps1"
                            },
                            "c:\\cfn\\scripts\\snap-by-group.ps1": {
                                "source": "https://raw.githubusercontent.com/plus3it/WinEBSbackups/master/SnapByCgroup.ps1"
                            },
                            "c:\\cfn\\scripts\\snap-maintenance.ps1": {
                                "source": "https://raw.githubusercontent.com/plus3it/WinEBSbackups/master/SnapMaint.ps1"
                            },
                            "c:\\cfn\\scripts\\unzip-archive.ps1": {
                                "source": "https://raw.githubusercontent.com/plus3it/cfn/master/scripts/unzip-archive.ps1"
                            }
                        },
                        "services": {
                            "windows": {
                                "cfn-hup": {
                                    "enabled": "true",
                                    "ensureRunning": "true",
                                    "files": [
                                        "c:\\cfn\\cfn-hup.conf",
                                        "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf"
                                    ]
                                }
                            }
                        }
                    },
                    "configSets": {
                        "launch": [
                            "install-cloudwatch-agent",
                            "join-domain",
                            "cfnsetup",
                            "install-roles",
                            "reboot",
                            "configure-fileshares",
                            "configure-backups",
                            "configure-admins",
                            "configure-rdcb",
                            "reboot",
                            "finalize"
                        ],
                        "update": [
                            "cfnsetup",
                            "finalize"
                        ]
                    },
                    "install-cloudwatch-agent": {
                        "commands": {
                            "10-install-cloudwatch-agent": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            {
                                                "Fn::FindInMap": [
                                                    "ShellCommandMap",
                                                    "powershell",
                                                    "command"
                                                ]
                                            },
                                            " \"& { ",
                                            "$CloudWatchAgentUri = [System.Uri]'",
                                            {
                                                "Ref": "CloudWatchAgentUrl"
                                            },
                                            "'; ",
                                            "$CloudWatchAgentScriptDir = 'c:\\cfn\\scripts\\AmazonCloudWatchAgent'; ",
                                            "$CloudWatchAgentZipFile = Join-Path $CloudWatchAgentScriptDir $CloudWatchAgentUri.Segments[($CloudWatchAgentUri.Segments.Length-1)]; ",
                                            "$Null = New-Item $CloudWatchAgentScriptDir -Type Directory -Force; ",
                                            "Read-S3Object",
                                            " -BucketName $CloudWatchAgentUri.Host",
                                            " -Key ($CloudWatchAgentUri.Segments[1..($CloudWatchAgentUri.Segments.Length-1)] -Join '')",
                                            " -File $CloudWatchAgentZipFile",
                                            " -Region ",
                                            {
                                                "Ref": "AWS::Region"
                                            },
                                            "; ",
                                            "$CloudWatchAgentInstallScript =  \"$CloudWatchAgentScriptDir\"+'\\install.ps1';",
                                            "$CloudWatchAgentConfig =  \"$CloudWatchAgentScriptDir\"+'\\aws-cloudwatch-agent-config.json';",
                                            " Expand-Archive -Path $CloudWatchAgentZipFile -DestinationPath $CloudWatchAgentScriptDir;",
                                            "Push-Location -Path $CloudWatchAgentScriptDir;",
                                            "iex $CloudWatchAgentInstallScript;",
                                            ".\\amazon-cloudwatch-agent-ctl.ps1 -a fetch-config -m ec2 -c file:$CloudWatchAgentConfig -s;",
                                            "Pop-Location",
                                            "}\""
                                        ]
                                    ]
                                },
                                "waitAfterCompletion": "0"
                            }
                        },
                        "files": {
                            "c:\\cfn\\scripts\\AmazonCloudWatchAgent\\aws-cloudwatch-agent-config.json": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "{",
                                            "    \"logs\": {\n",
                                            "        \"logs_collected\": {\n",
                                            "            \"files\": {\n",
                                            "                \"collect_list\": [\n",
                                            "                    {\n",
                                            "                        \"file_path\": \"c:\\\\ProgramData\\\\Amazon\\\\AmazonCloudWatchAgent\\\\Logs\\\\amazon-cloudwatch-agent.log\",\n",
                                            "                        \"log_group_name\": \"",
                                            {
                                                "Fn::If": [
                                                    "InstallCloudWatchAgent",
                                                    {
                                                        "Ref": "InstanceLogGroup"
                                                    },
                                                    {
                                                        "Ref": "AWS::NoValue"
                                                    }
                                                ]
                                            },
                                            "\",\n",
                                            "                        \"log_stream_name\": \"cloudwatch_agent_logs_{instance_id}\",\n",
                                            "                        \"timestamp_format\": \"%H:%M:%S %y %b %-d\"\n",
                                            "                    },\n",
                                            "                    {\n",
                                            "                        \"file_path\": \"c:\\\\cfn\\\\log\\\\cfn-init.log\",\n",
                                            "                        \"log_group_name\": \"",
                                            {
                                                "Fn::If": [
                                                    "InstallCloudWatchAgent",
                                                    {
                                                        "Ref": "InstanceLogGroup"
                                                    },
                                                    {
                                                        "Ref": "AWS::NoValue"
                                                    }
                                                ]
                                            },
                                            "\",\n",
                                            "                        \"log_stream_name\": \"cloudformation_init_logs_{instance_id}\",\n",
                                            "                        \"timestamp_format\": \"%H:%M:%S %y %b %-d\"\n",
                                            "                    },\n",
                                            "                    {\n",
                                            "                        \"file_path\": \"c:\\\\Watchmaker\\\\Logs\\\\salt_call.debug.log\",\n",
                                            "                        \"log_group_name\": \"",
                                            {
                                                "Fn::If": [
                                                    "InstallCloudWatchAgent",
                                                    {
                                                        "Ref": "InstanceLogGroup"
                                                    },
                                                    {
                                                        "Ref": "AWS::NoValue"
                                                    }
                                                ]
                                            },
                                            "\",\n",
                                            "                        \"log_stream_name\": \"salt_call_debug_logs_{instance_id}\",\n",
                                            "                        \"timestamp_format\": \"%H:%M:%S %y %b %-d\"\n",
                                            "                    },\n",
                                            "                    {\n",
                                            "                        \"file_path\": \"c:\\\\Watchmaker\\\\Logs\\\\watchmaker.log\",\n",
                                            "                        \"log_group_name\": \"",
                                            {
                                                "Fn::If": [
                                                    "InstallCloudWatchAgent",
                                                    {
                                                        "Ref": "InstanceLogGroup"
                                                    },
                                                    {
                                                        "Ref": "AWS::NoValue"
                                                    }
                                                ]
                                            },
                                            "\",\n",
                                            "                        \"log_stream_name\": \"watchmaker_logs_{instance_id}\",\n",
                                            "                        \"timestamp_format\": \"%H:%M:%S %y %b %-d\"\n",
                                            "                    }\n",
                                            "                ]\n",
                                            "            }\n",
                                            "        },\n",
                                            "        \"log_stream_name\": \"default_logs_{instance_id}\"\n",
                                            "    }\n",
                                            "}\n"
                                        ]
                                    ]
                                }
                            }
                        }
                    },
                    "configure-admins": {
                        "commands": {
                            "10-configure-admins": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            {
                                                "Fn::FindInMap": [
                                                    "ShellCommandMap",
                                                    "powershell",
                                                    "command"
                                                ]
                                            },
                                            "-Command \"",
                                            "Invoke-Command -ScriptBlock {",
                                            "$ErrorActionPreference = 'Stop'; ",
                                            "Import-Module RemoteDesktop,RemoteDesktopServices; ",
                                            "$admin = (Invoke-Expression ((Get-SSMParameterValue -Name '",
                                            {
                                                "Ref": "SsmRdcbCredential"
                                            },
                                            "' -WithDecryption $true).Parameters | ? {$_.Name -eq '",
                                            {
                                                "Ref": "SsmRdcbCredential"
                                            },
                                            "' }).Value).Username + '@",
                                            {
                                                "Ref": "DomainNetbiosName"
                                            },
                                            "'; ",
                                            "if (-not ($admin -in [Microsoft.TerminalServices.PSEngine.UserGroupHelper]::ListMembers('Administrators'))) { ",
                                            "[Microsoft.TerminalServices.PSEngine.UserGroupHelper]::AddMember('Administrators', $admin); ",
                                            "} } -Verbose -ErrorAction Stop",
                                            "\""
                                        ]
                                    ]
                                },
                                "waitAfterCompletion": "0"
                            }
                        }
                    },
                    "configure-backups": {
                        "commands": {
                            "10-configure-backups": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            {
                                                "Fn::FindInMap": [
                                                    "ShellCommandMap",
                                                    "powershell",
                                                    "command"
                                                ]
                                            },
                                            "c:\\cfn\\scripts\\configure-ebsbackups.ps1",
                                            " -SnapshotScript 'C:\\cfn\\scripts\\snap-by-group.ps1'",
                                            " -MaintenanceScript 'C:\\cfn\\scripts\\snap-maintenance.ps1'",
                                            " -ConsistencyGroup 'BackupGroup01'",
                                            " -Verbose -ErrorAction Stop"
                                        ]
                                    ]
                                },
                                "waitAfterCompletion": "0"
                            }
                        }
                    },
                    "configure-fileshares": {
                        "commands": {
                            "10-create-upd-folder": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            {
                                                "Fn::FindInMap": [
                                                    "ShellCommandMap",
                                                    "powershell",
                                                    "command"
                                                ]
                                            },
                                            "-Command \"",
                                            "New-Item -ItemType directory -Path 'D:\\Shares\\Profiles$' -Force ",
                                            "-Verbose -ErrorAction Stop",
                                            "\""
                                        ]
                                    ]
                                },
                                "waitAfterCompletion": "0"
                            },
                            "20-configure-fileshares": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            {
                                                "Fn::FindInMap": [
                                                    "ShellCommandMap",
                                                    "powershell",
                                                    "command"
                                                ]
                                            },
                                            "c:\\cfn\\scripts\\configure-fileshares.ps1",
                                            " -DomainNetbiosName '",
                                            {
                                                "Ref": "DomainNetbiosName"
                                            },
                                            "' -GroupName '",
                                            {
                                                "Ref": "DomainAccessUserGroup"
                                            },
                                            "' -Verbose -ErrorAction Stop"
                                        ]
                                    ]
                                },
                                "waitAfterCompletion": "0"
                            }
                        }
                    },
                    "configure-rdcb": {
                        "commands": {
                            "20-configure-rdcb": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            {
                                                "Fn::FindInMap": [
                                                    "ShellCommandMap",
                                                    "powershell",
                                                    "command"
                                                ]
                                            },
                                            "-Command \"",
                                            {
                                                "Fn::FindInMap": [
                                                    "ShellCommandMap",
                                                    "psexec",
                                                    "command"
                                                ]
                                            },
                                            " -u \\\"",
                                            {
                                                "Ref": "DomainNetbiosName"
                                            },
                                            "\\",
                                            "$((Invoke-Expression ((Get-SSMParameterValue -Name '",
                                            {
                                                "Ref": "SsmRdcbCredential"
                                            },
                                            "' -WithDecryption $true).Parameters ^| ? {$_.Name -eq '",
                                            {
                                                "Ref": "SsmRdcbCredential"
                                            },
                                            "' }).Value).Username)",
                                            "\\\" -p \\\"",
                                            "$((Invoke-Expression ((Get-SSMParameterValue -Name '",
                                            {
                                                "Ref": "SsmRdcbCredential"
                                            },
                                            "' -WithDecryption $true).Parameters ^| ? {$_.Name -eq '",
                                            {
                                                "Ref": "SsmRdcbCredential"
                                            },
                                            "' }).Value).Password)",
                                            "\\\" ",
                                            {
                                                "Fn::FindInMap": [
                                                    "ShellCommandMap",
                                                    "powershell",
                                                    "command"
                                                ]
                                            },
                                            "c:\\cfn\\scripts\\configure-rdcb.ps1 ",
                                            "-Verbose -ErrorAction Stop",
                                            "\""
                                        ]
                                    ]
                                },
                                "waitAfterCompletion": "0"
                            }
                        }
                    },
                    "finalize": {
                        "commands": {
                            "10-signal-success": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "cfn-signal.exe -e 0",
                                            " --stack ",
                                            {
                                                "Ref": "AWS::StackName"
                                            },
                                            " --resource RdCbFileServerInstance",
                                            " --region ",
                                            {
                                                "Ref": "AWS::Region"
                                            },
                                            "\n"
                                        ]
                                    ]
                                },
                                "ignoreErrors": "true",
                                "waitAfterCompletion": "0"
                            }
                        }
                    },
                    "install-roles": {
                        "commands": {
                            "10-install-roles": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            {
                                                "Fn::FindInMap": [
                                                    "ShellCommandMap",
                                                    "powershell",
                                                    "command"
                                                ]
                                            },
                                            "-Command ",
                                            "\"",
                                            "Install-WindowsFeature FS-FileServer,RDS-Connection-Broker,RDS-RD-Server,RDS-Licensing,RDS-Licensing-UI -Verbose",
                                            "\""
                                        ]
                                    ]
                                },
                                "waitAfterCompletion": "0"
                            }
                        }
                    },
                    "join-domain": {
                        "commands": {
                            "10-join-domain": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            {
                                                "Fn::FindInMap": [
                                                    "ShellCommandMap",
                                                    "powershell",
                                                    "command"
                                                ]
                                            },
                                            "-Command ",
                                            "Write-Verbose 'Waiting for SSM to complete domain join, which reboots the instance automatically' -Verbose"
                                        ]
                                    ]
                                },
                                "waitAfterCompletion": "forever"
                            }
                        }
                    },
                    "reboot": {
                        "commands": {
                            "10-reboot": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            {
                                                "Fn::FindInMap": [
                                                    "ShellCommandMap",
                                                    "powershell",
                                                    "command"
                                                ]
                                            },
                                            " \"Restart-Computer -Force -Verbose\""
                                        ]
                                    ]
                                },
                                "waitAfterCompletion": "forever"
                            }
                        }
                    }
                }
            },
            "Properties": {
                "BlockDeviceMappings": [
                    {
                        "DeviceName": "/dev/sda1",
                        "Ebs": {
                            "DeleteOnTermination": "true",
                            "VolumeSize": "50",
                            "VolumeType": "gp2"
                        }
                    }
                ],
                "DisableApiTermination": "true",
                "EbsOptimized": {
                    "Fn::FindInMap": [
                        "InstanceTypeMap",
                        {
                            "Ref": "InstanceType"
                        },
                        "SupportsEbsOptimized"
                    ]
                },
                "IamInstanceProfile": {
                    "Ref": "Ec2IamInstanceProfile"
                },
                "ImageId": {
                    "Fn::If": [
                        "UseAmiLookup",
                        {
                            "Fn::GetAtt": [
                                "AmiIdLookup",
                                "Id"
                            ]
                        },
                        {
                            "Ref": "AmiId"
                        }
                    ]
                },
                "InstanceType": {
                    "Ref": "InstanceType"
                },
                "KeyName": {
                    "Ref": "KeyPairName"
                },
                "Monitoring": "true",
                "NetworkInterfaces": [
                    {
                        "AssociatePublicIpAddress": {
                            "Fn::If": [
                                "AssignPublicIp",
                                "true",
                                "false"
                            ]
                        },
                        "DeleteOnTermination": "true",
                        "DeviceIndex": 0,
                        "GroupSet": {
                            "Fn::Split": [
                                ",",
                                {
                                    "Fn::Join": [
                                        ",",
                                        [
                                            {
                                                "Ref": "RdcbEc2SecurityGroup"
                                            },
                                            {
                                                "Fn::Join": [
                                                    ",",
                                                    {
                                                        "Ref": "ExtraSecurityGroupIds"
                                                    }
                                                ]
                                            }
                                        ]
                                    ]
                                }
                            ]
                        },
                        "SubnetId": {
                            "Ref": "Ec2SubnetId"
                        }
                    }
                ],
                "SsmAssociations": [
                    {
                        "DocumentName": {
                            "Fn::Join": [
                                "",
                                [
                                    "awsconfig_Domain_",
                                    {
                                        "Ref": "DomainDirectoryId"
                                    },
                                    "_",
                                    {
                                        "Ref": "DomainDnsName"
                                    }
                                ]
                            ]
                        }
                    }
                ],
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Ref": "AWS::StackName"
                        }
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "<script>",
                                "\n",
                                "cfn-init.exe -v -c launch",
                                " --stack ",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                " --resource RdCbFileServerInstance ",
                                " --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\n",
                                "if %ERRORLEVEL% equ 0 goto success\n\n",
                                " :error\n",
                                "cfn-signal.exe -e 1",
                                " --stack ",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                " --resource RdCbFileServerInstance ",
                                " --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\n",
                                "echo \"ERROR: cfn-init failed! Aborting!\"",
                                "\n",
                                "exit /b 1\n\n",
                                " :success\n",
                                "</script>"
                            ]
                        ]
                    }
                },
                "Volumes": [
                    {
                        "Device": "/dev/xvdf",
                        "VolumeId": {
                            "Ref": "DataVolume"
                        }
                    }
                ]
            },
            "Type": "AWS::EC2::Instance"
    },
    "InstanceLogGroup": {
        "Condition": "InstallCloudWatchAgent",
        "Properties": {
            "LogGroupName": {
                "Fn::Join": [
                    "",
                    [
                        "/aws/ec2/win/",
                        {
                            "Ref": "AWS::StackName"
                        }
                    ]
                ]
            }
        },
        "Type": "AWS::Logs::LogGroup"
    },
        "RdcbEc2SecurityGroup": {
            "Properties": {
                "GroupDescription": "Logical container for an RDCB EC2 instance",
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "",
                                [
                                    "rdcb-ec2-",
                                    {
                                        "Ref": "AWS::StackName"
                                    }
                                ]
                            ]
                        }
                    }
                ],
                "VpcId": {
                    "Ref": "VpcId"
                }
            },
            "Type": "AWS::EC2::SecurityGroup"
        },
        "SnsSubscriptionEmail": {
            "Condition": "CreateSnsSubscription",
            "Properties": {
                "Endpoint": {
                    "Ref": "NotificationEmail"
                },
                "Protocol": "email",
                "TopicArn": {
                    "Ref": "SnsTopic"
                }
            },
            "Type": "AWS::SNS::Subscription"
        },
        "SnsTopic": {
            "Type": "AWS::SNS::Topic"
        },
        "SsmAssociationCloudWatchMetrics": {
            "Fn::Transform": {
                "Name": "AWS::Include",
                "Parameters": {
                    "Location": "s3://app-chemistry/snippets/ssm_cloudwatch_instance_memory_disk_c_d.snippet.cfn.yaml"
                }
            }
        }
    }
}