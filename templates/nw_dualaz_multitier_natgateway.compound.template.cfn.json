{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Conditions": {
        "CreatePeeredZone": {
            "Fn::Not": [
                {
                    "Fn::Equals": [
                        {
                            "Ref": "VpcPeerDomainDnsName"
                        },
                        ""
                    ]
                }
            ]
        },
        "CreateSecurityGroup": {
            "Fn::Not": [
                {
                    "Fn::Equals": [
                        {
                            "Ref": "VpcPeerSecurityGroup"
                        },
                        ""
                    ]
                }
            ]
        },
        "PeerVpc": {
            "Fn::Not": [
                {
                    "Fn::Equals": [
                        {
                            "Ref": "VpcPeerId"
                        },
                        ""
                    ]
                }
            ]
        }
    },
    "Description": "This template creates a VPC infrastructure for a dual-AZ, dual-tier application. Outbound access for private subnets is enabled via a NAT Gateway in each AZ.",
    "Metadata": {
        "AWS::CloudFormation::Interface": {
            "ParameterGroups": [
                {
                    "Label": {
                        "default": "VPC Configuration"
                    },
                    "Parameters": [
                        "CIDRVPC"
                    ]
                },
                {
                    "Label": {
                        "default": "Private Subnet Configuration"
                    },
                    "Parameters": [
                        "CIDRPrivateSubnet1",
                        "CIDRPrivateSubnet2"
                    ]
                },
                {
                    "Label": {
                        "default": "Public Subnet Configuration"
                    },
                    "Parameters": [
                        "CIDRPublicSubnet1",
                        "CIDRPublicSubnet2"
                    ]
                },
                {
                    "Label": {
                        "default": "VPC Peering Configuration"
                    },
                    "Parameters": [
                        "VpcPeerId",
                        "VpcPeerCidr",
                        "VpcPeerAccountId",
                        "VpcPeerRoleArn",
                        "VpcPeerSecurityGroup"
                    ]
                },
                {
                    "Label": {
                        "default": "VPC Peering Route53 Configuration"
                    },
                    "Parameters": [
                        "VpcPeerDomainDnsName",
                        "VpcPeerDc1Name",
                        "VpcPeerDc1Ip",
                        "VpcPeerDc2Name",
                        "VpcPeerDc2Ip"
                    ]
                }
            ]
        },
        "Version": "0.0.9"
    },
    "Outputs": {
        "InternetGatewayId": {
            "Description": "ID of the Internet Gateway",
            "Value": {
                "Fn::GetAtt": [
                    "VPCStack",
                    "Outputs.InternetGatewayId"
                ]
            }
        },
        "NATGatewayElasticIP": {
            "Description": "Elastic IP for NAT Gateway",
            "Value": {
                "Fn::GetAtt": [
                    "NATGatewayStack",
                    "Outputs.NATGatewayElasticIP"
                ]
            }
        },
        "NATGatewayElasticIpId": {
            "Description": "Allocation ID of the Elastic IP for NAT Gateway",
            "Value": {
                "Fn::GetAtt": [
                    "NATGatewayStack",
                    "Outputs.NATGatewayElasticIpId"
                ]
            }
        },
        "NATGatewayId": {
            "Description": "Resource ID of the NAT Gateway",
            "Value": {
                "Fn::GetAtt": [
                    "NATGatewayStack",
                    "Outputs.NATGatewayId"
                ]
            }
        },
        "PrivateRouteTableId": {
            "Description": "ID of the Private Route Table for NAT Gateway",
            "Value": {
                "Fn::GetAtt": [
                    "NATGatewayStack",
                    "Outputs.PrivateRouteTableId"
                ]
            }
        },
        "PrivateSubnet1Id": {
            "Description": "Subnet ID for Private Subnet 1",
            "Value": {
                "Fn::GetAtt": [
                    "PrivateSubnet1Stack",
                    "Outputs.PrivateSubnetId"
                ]
            }
        },
        "PrivateSubnet2Id": {
            "Description": "Subnet ID for Private Subnet 2",
            "Value": {
                "Fn::GetAtt": [
                    "PrivateSubnet2Stack",
                    "Outputs.PrivateSubnetId"
                ]
            }
        },
        "PublicRouteTableId": {
            "Description": "Route Table ID for Public Subnet",
            "Value": {
                "Fn::GetAtt": [
                    "VPCStack",
                    "Outputs.PublicRouteTableId"
                ]
            }
        },
        "PublicSubnet1Id": {
            "Description": "Subnet ID for Public Subnet 1",
            "Value": {
                "Fn::GetAtt": [
                    "PublicSubnet1Stack",
                    "Outputs.PublicSubnetId"
                ]
            }
        },
        "PublicSubnet2Id": {
            "Description": "Subnet ID for Public Subnet 2",
            "Value": {
                "Fn::GetAtt": [
                    "PublicSubnet2Stack",
                    "Outputs.PublicSubnetId"
                ]
            }
        },
        "VPC": {
            "Description": "VPC ID",
            "Value": {
                "Fn::GetAtt": [
                    "VPCStack",
                    "Outputs.VPC"
                ]
            }
        },
        "VpcPeerPrivateHostedZoneId": {
            "Condition": "CreatePeeredZone",
            "Description": "ID of the Private Hosted Zone used for resolution of a domain in the peered VPC",
            "Value": {
                "Fn::GetAtt": [
                    "VpcPeeredZoneStack",
                    "Outputs.PrivateHostedZoneId"
                ]
            }
        },
        "VpcPeerSecurityGroup": {
            "Condition": "CreateSecurityGroup",
            "Description": "ID of the Security Group that allows remote access from instances in the specified security group within the peered account",
            "Value": {
                "Fn::GetAtt": [
                    "PeeredSecurityGroupStack",
                    "Outputs.VpcPeerSecurityGroupId"
                ]
            }
        },
        "VpcPeeringConnection": {
            "Condition": "PeerVpc",
            "Description": "ID of the VPC peering connection",
            "Value": {
                "Fn::GetAtt": [
                    "VPCStack",
                    "Outputs.VpcPeeringConnection"
                ]
            }
        }
    },
    "Parameters": {
        "CIDRPrivateSubnet1": {
            "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
            "Default": "10.1.0.0/19",
            "Description": "CIDR Block for a Private Subnet (Example: 10.0.0.0/19, 10.0.64.0/19, etc...)",
            "Type": "String"
        },
        "CIDRPrivateSubnet2": {
            "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
            "Default": "10.1.64.0/19",
            "Description": "CIDR Block for a Private Subnet (Example: 10.0.0.0/19, 10.0.64.0/19, etc...)",
            "Type": "String"
        },
        "CIDRPublicSubnet1": {
            "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
            "Default": "10.1.32.0/20",
            "Description": "CIDR Block for a Public DMZ Subnet (Example: 10.0.32.0/20, 10.0.96.0/20, etc...)",
            "Type": "String"
        },
        "CIDRPublicSubnet2": {
            "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
            "Default": "10.1.96.0/20",
            "Description": "CIDR Block for a Public DMZ Subnet (Example: 10.0.32.0/20, 10.0.96.0/20, etc...)",
            "Type": "String"
        },
        "CIDRVPC": {
            "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
            "Default": "10.1.0.0/16",
            "Description": "CIDR Block for the VPC (Example: 10.0.0.0/16, etc...)",
            "Type": "String"
        },
        "VpcPeerAccountId": {
            "AllowedPattern": "^$|^[0-9]{12}$",
            "Default": "",
            "Description": "Account ID of the cross-account peer.",
            "Type": "String"
        },
        "VpcPeerCidr": {
            "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
            "Default": "10.0.0.0/16",
            "Description": "CIDR block for the VPC Peer (Example: 10.0.0.0/16, etc...). Used to create routes to the VPC peer. Ignored if \"VpcPeerId\" is blank.",
            "Type": "String"
        },
        "VpcPeerDc1Ip": {
            "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})",
            "Default": "10.0.0.10",
            "Description": "Private IP for the first Domain Controller instance (Example: 10.0.0.10, 10.0.64.10, etc...). Ignored if \"VpcPeerDomainDnsName\" is blank.",
            "Type": "String"
        },
        "VpcPeerDc1Name": {
            "AllowedPattern": "[a-zA-Z0-9_-]+",
            "Default": "dc001",
            "Description": "NetBIOS computer name of the first Domain Controller (Example: dc001, dc002, etc...). Ignored if \"VpcPeerDomainDnsName\" is blank.",
            "MaxLength": "15",
            "MinLength": "1",
            "Type": "String"
        },
        "VpcPeerDc2Ip": {
            "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})",
            "Default": "10.0.64.10",
            "Description": "Private IP for the second Domain Controller instance (e.g. 10.0.0.10, 10.0.64.10, etc...). Ignored if \"VpcPeerDomainDnsName\" is blank.",
            "Type": "String"
        },
        "VpcPeerDc2Name": {
            "AllowedPattern": "[a-zA-Z0-9_-]+",
            "Default": "dc002",
            "Description": "NetBIOS computer name of the second Domain Controller (Example: dc001, dc002, etc...). Ignored if \"VpcPeerDomainDnsName\" is blank.",
            "MaxLength": "15",
            "MinLength": "1",
            "Type": "String"
        },
        "VpcPeerDomainDnsName": {
            "AllowedPattern": "^$|[a-zA-Z0-9]+\\..+",
            "Default": "ad.example.com",
            "Description": "DNS name of the peered zone (Example: ad.example.com). Creates a Route53 Private Hosted Zone. Leave blank to skip this step.",
            "Type": "String"
        },
        "VpcPeerId": {
            "AllowedPattern": "^$|^vpc-(?=(?:.{8}|.{17})$)[a-z0-9]*$",
            "Default": "",
            "Description": "If creating a VPC peering connection, specify the VPC ID of the peer. Leave blank if not creating a VPC peering connection.",
            "Type": "String"
        },
        "VpcPeerRoleArn": {
            "AllowedPattern": "^$|^arn:aws:iam::[0-9]{12}:role\\/[a-zA-Z0-9\\-]+",
            "Default": "",
            "Description": "Role ARN of the cross-account role allowing another account to achieve peering.",
            "Type": "String"
        },
        "VpcPeerSecurityGroup": {
            "AllowedPattern": "^$|^sg-(?=(?:.{8}|.{17})$)[a-z0-9]*$",
            "Default": "",
            "Description": "Creates a Security Group and ingress rule to allow remote access from instances in the specified security group within the peered account. Enter the SG from the peered account (Example: sg-12345678).",
            "Type": "String"
        }
    },
    "Resources": {
        "NATGatewayStack": {
            "DependsOn": "PublicSubnet1Stack",
            "Properties": {
                "Parameters": {
                    "PublicSubnetId": {
                        "Fn::GetAtt": [
                            "PublicSubnet1Stack",
                            "Outputs.PublicSubnetId"
                        ]
                    },
                    "VPC": {
                        "Fn::GetAtt": [
                            "VPCStack",
                            "Outputs.VPC"
                        ]
                    }
                },
                "TemplateURL": "https://s3.amazonaws.com/app-chemistry/templates/nw_nat_gateway.element.template.cfn.json"
            },
            "Type": "AWS::CloudFormation::Stack"
        },
        "PeeredSecurityGroupStack": {
            "Condition": "CreateSecurityGroup",
            "DependsOn": "VpcPeeringConnectionStack",
            "Properties": {
                "Parameters": {
                    "SourcePeerIngress": {
                        "Ref": "VpcPeerSecurityGroup"
                    },
                    "VPC": {
                        "Fn::GetAtt": [
                            "VPCStack",
                            "Outputs.VPC"
                        ]
                    }
                },
                "TemplateURL": "https://s3.amazonaws.com/app-chemistry/templates/nw_peered_sg.element.template.cfn.json"
            },
            "Type": "AWS::CloudFormation::Stack"
        },
        "PrivateSubnet1Stack": {
            "DependsOn": "NATGatewayStack",
            "Properties": {
                "Parameters": {
                    "AvailabilityZoneName": {
                        "Fn::Select": [
                            0,
                            {
                                "Fn::GetAZs": ""
                            }
                        ]
                    },
                    "CIDRPrivateSubnet": {
                        "Ref": "CIDRPrivateSubnet1"
                    },
                    "PrivateRouteTableId": {
                        "Fn::GetAtt": [
                            "NATGatewayStack",
                            "Outputs.PrivateRouteTableId"
                        ]
                    },
                    "VPC": {
                        "Fn::GetAtt": [
                            "VPCStack",
                            "Outputs.VPC"
                        ]
                    }
                },
                "TemplateURL": "https://s3.amazonaws.com/app-chemistry/templates/nw_private_subnet.element.template.cfn.json"
            },
            "Type": "AWS::CloudFormation::Stack"
        },
        "PrivateSubnet2Stack": {
            "DependsOn": "NATGatewayStack",
            "Properties": {
                "Parameters": {
                    "AvailabilityZoneName": {
                        "Fn::Select": [
                            1,
                            {
                                "Fn::GetAZs": ""
                            }
                        ]
                    },
                    "CIDRPrivateSubnet": {
                        "Ref": "CIDRPrivateSubnet2"
                    },
                    "PrivateRouteTableId": {
                        "Fn::GetAtt": [
                            "NATGatewayStack",
                            "Outputs.PrivateRouteTableId"
                        ]
                    },
                    "VPC": {
                        "Fn::GetAtt": [
                            "VPCStack",
                            "Outputs.VPC"
                        ]
                    }
                },
                "TemplateURL": "https://s3.amazonaws.com/app-chemistry/templates/nw_private_subnet.element.template.cfn.json"
            },
            "Type": "AWS::CloudFormation::Stack"
        },
        "PublicSubnet1Stack": {
            "DependsOn": "VPCStack",
            "Properties": {
                "Parameters": {
                    "AvailabilityZoneName": {
                        "Fn::Select": [
                            0,
                            {
                                "Fn::GetAZs": ""
                            }
                        ]
                    },
                    "CIDRPublicSubnet": {
                        "Ref": "CIDRPublicSubnet1"
                    },
                    "PublicRouteTableId": {
                        "Fn::GetAtt": [
                            "VPCStack",
                            "Outputs.PublicRouteTableId"
                        ]
                    },
                    "VPC": {
                        "Fn::GetAtt": [
                            "VPCStack",
                            "Outputs.VPC"
                        ]
                    }
                },
                "TemplateURL": "https://s3.amazonaws.com/app-chemistry/templates/nw_public_subnet.element.template.cfn.json"
            },
            "Type": "AWS::CloudFormation::Stack"
        },
        "PublicSubnet2Stack": {
            "DependsOn": "VPCStack",
            "Properties": {
                "Parameters": {
                    "AvailabilityZoneName": {
                        "Fn::Select": [
                            1,
                            {
                                "Fn::GetAZs": ""
                            }
                        ]
                    },
                    "CIDRPublicSubnet": {
                        "Ref": "CIDRPublicSubnet2"
                    },
                    "PublicRouteTableId": {
                        "Fn::GetAtt": [
                            "VPCStack",
                            "Outputs.PublicRouteTableId"
                        ]
                    },
                    "VPC": {
                        "Fn::GetAtt": [
                            "VPCStack",
                            "Outputs.VPC"
                        ]
                    }
                },
                "TemplateURL": "https://s3.amazonaws.com/app-chemistry/templates/nw_public_subnet.element.template.cfn.json"
            },
            "Type": "AWS::CloudFormation::Stack"
        },
        "VPCStack": {
            "Properties": {
                "Parameters": {
                    "CIDRVPC": {
                        "Ref": "CIDRVPC"
                    }
                },
                "TemplateURL": "https://s3.amazonaws.com/app-chemistry/templates/nw_vpc_with_igw.element.template.cfn.json"
            },
            "Type": "AWS::CloudFormation::Stack"
        },
        "VpcPeeredZoneStack": {
            "Condition": "CreatePeeredZone",
            "DependsOn": "VPCStack",
            "Properties": {
                "Parameters": {
                    "PeeredDc1Ip": {
                        "Ref": "VpcPeerDc1Ip"
                    },
                    "PeeredDc1Name": {
                        "Ref": "VpcPeerDc1Name"
                    },
                    "PeeredDc2Ip": {
                        "Ref": "VpcPeerDc2Ip"
                    },
                    "PeeredDc2Name": {
                        "Ref": "VpcPeerDc2Name"
                    },
                    "PeeredDomainDnsName": {
                        "Ref": "VpcPeerDomainDnsName"
                    },
                    "VPC": {
                        "Fn::GetAtt": [
                            "VPCStack",
                            "Outputs.VPC"
                        ]
                    }
                },
                "TemplateURL": "https://s3.amazonaws.com/app-chemistry/templates/nw_r53_peered_domain.element.template.cfn.json"
            },
            "Type": "AWS::CloudFormation::Stack"
        },
        "VpcPeeringConnectionStack": {
            "Condition": "PeerVpc",
            "DependsOn": "NATGatewayStack",
            "Properties": {
                "Parameters": {
                    "RouteTableId1": {
                        "Fn::GetAtt": [
                            "VPCStack",
                            "Outputs.PublicRouteTableId"
                        ]
                    },
                    "RouteTableId2": {
                        "Fn::GetAtt": [
                            "NATGatewayStack",
                            "Outputs.PrivateRouteTableId"
                        ]
                    },
                    "VPC": {
                        "Fn::GetAtt": [
                            "VPCStack",
                            "Outputs.VPC"
                        ]
                    },
                    "VpcPeerAccountId": {
                        "Ref": "VpcPeerAccountId"
                    },
                    "VpcPeerCidr": {
                        "Ref": "VpcPeerCidr"
                    },
                    "VpcPeerId": {
                        "Ref": "VpcPeerId"
                    },
                    "VpcPeerRoleArn": {
                        "Ref": "VpcPeerRoleArn"
                    }
                },
                "TemplateURL": "https://s3.amazonaws.com/app-chemistry/templates/nw_vpc_peering_connection.element.template.cfn.json"
            },
            "Type": "AWS::CloudFormation::Stack"
        }
    }
}
